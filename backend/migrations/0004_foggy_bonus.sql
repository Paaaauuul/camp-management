-- Create enum for reservation status
CREATE TYPE reservation_status AS ENUM ('pending', 'confirmed', 'cancelled');

-- Create reservations table
CREATE TABLE reservations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  site_id BIGINT REFERENCES sites(id) NOT NULL,
  customer_id BIGINT REFERENCES customers(id) NOT NULL,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  amount DECIMAL(10,2) NOT NULL DEFAULT 0,
  status reservation_status NOT NULL DEFAULT 'pending',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Add payment_status to bookings table
ALTER TABLE bookings 
ADD COLUMN payment_status TEXT NOT NULL DEFAULT 'paid',
ADD COLUMN amount DECIMAL(10,2) NOT NULL DEFAULT 0,
ADD COLUMN reservation_id BIGINT REFERENCES reservations(id);

-- Create function to handle reservation confirmation and booking creation
CREATE OR REPLACE FUNCTION handle_reservation_payment()
RETURNS TRIGGER AS $$
BEGIN
  -- When a reservation is marked as confirmed (payment received)
  IF NEW.status = 'confirmed' AND OLD.status = 'pending' THEN
    -- Create a new booking
    INSERT INTO bookings (
      site_id,
      customer_id,
      start_date,
      end_date,
      amount,
      payment_status,
      reservation_id
    ) VALUES (
      NEW.site_id,
      NEW.customer_id,
      NEW.start_date,
      NEW.end_date,
      NEW.amount,
      'paid',
      NEW.id
    );
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for reservation confirmation
CREATE TRIGGER on_reservation_confirmed
  AFTER UPDATE ON reservations
  FOR EACH ROW
  WHEN (NEW.status = 'confirmed' AND OLD.status = 'pending')
  EXECUTE FUNCTION handle_reservation_payment();

-- Create indexes for better query performance
CREATE INDEX idx_reservations_dates ON reservations (start_date, end_date);
CREATE INDEX idx_reservations_status ON reservations (status);
CREATE INDEX idx_bookings_dates ON bookings (start_date, end_date);
CREATE INDEX idx_bookings_payment_status ON bookings (payment_status);

-- Add RLS policies
ALTER TABLE reservations ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Public read access"
  ON reservations FOR SELECT
  USING (true);

CREATE POLICY "Public insert access"
  ON reservations FOR INSERT
  WITH CHECK (true);

CREATE POLICY "Public update access"
  ON reservations FOR UPDATE
  USING (true);

-- Update function for updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = timezone('utc'::text, now());
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger for updated_at
CREATE TRIGGER update_reservations_updated_at
  BEFORE UPDATE ON reservations
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();