/*
  # Add Multi-tenant System

  1. New Tables
    - tenants: Store campground information
    - tenant_sites: Store site configurations for each tenant
    - tenant_pricing: Store pricing tiers for each tenant
    - tenant_users: Link users to tenants with roles
    
  2. Security
    - Enable RLS
    - Add policies for tenant access
    
  3. Changes
    - Add tenant_id to existing tables
*/

-- Create role enum
CREATE TYPE user_role AS ENUM ('admin', 'owner', 'employee');

-- Create tenants table
CREATE TABLE tenants (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  slug TEXT NOT NULL UNIQUE,
  domain TEXT,
  primary_color TEXT DEFAULT '#10B981',
  secondary_color TEXT DEFAULT '#3B82F6',
  logo_url TEXT,
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create tenant_sites table
CREATE TABLE tenant_sites (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  tenant_id BIGINT REFERENCES tenants(id) ON DELETE CASCADE NOT NULL,
  site_type site_type NOT NULL,
  quantity INTEGER NOT NULL DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create tenant_pricing table
CREATE TABLE tenant_pricing (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  tenant_id BIGINT REFERENCES tenants(id) ON DELETE CASCADE NOT NULL,
  site_type site_type NOT NULL,
  price_per_night DECIMAL(10,2) NOT NULL,
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  UNIQUE(tenant_id, site_type)
);

-- Create tenant_users table
CREATE TABLE tenant_users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  tenant_id BIGINT REFERENCES tenants(id) ON DELETE CASCADE NOT NULL,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  role user_role NOT NULL DEFAULT 'employee',
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  UNIQUE(tenant_id, user_id)
);

-- Add tenant_id to sites table
ALTER TABLE sites
ADD COLUMN tenant_id BIGINT REFERENCES tenants(id) ON DELETE CASCADE;

-- Enable RLS
ALTER TABLE tenants ENABLE ROW LEVEL SECURITY;
ALTER TABLE tenant_sites ENABLE ROW LEVEL SECURITY;
ALTER TABLE tenant_pricing ENABLE ROW LEVEL SECURITY;
ALTER TABLE tenant_users ENABLE ROW LEVEL SECURITY;

-- Create policies for tenants
CREATE POLICY "System admins can manage tenants"
  ON tenants
  USING (
    EXISTS (
      SELECT 1 FROM tenant_users
      WHERE user_id = auth.uid()
      AND role = 'admin'
    )
  );

CREATE POLICY "Users can view their assigned tenants"
  ON tenants
  FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM tenant_users
      WHERE user_id = auth.uid()
      AND tenant_id = tenants.id
    )
  );

-- Create policies for tenant_sites
CREATE POLICY "System admins can manage tenant sites"
  ON tenant_sites
  USING (
    EXISTS (
      SELECT 1 FROM tenant_users
      WHERE user_id = auth.uid()
      AND role = 'admin'
    )
  );

CREATE POLICY "Users can view their tenant sites"
  ON tenant_sites
  FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM tenant_users
      WHERE user_id = auth.uid()
      AND tenant_id = tenant_sites.tenant_id
    )
  );

-- Create policies for tenant_pricing
CREATE POLICY "System admins and owners can manage pricing"
  ON tenant_pricing
  USING (
    EXISTS (
      SELECT 1 FROM tenant_users
      WHERE user_id = auth.uid()
      AND tenant_id = tenant_pricing.tenant_id
      AND role IN ('admin', 'owner')
    )
  );

CREATE POLICY "Users can view their tenant pricing"
  ON tenant_pricing
  FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM tenant_users
      WHERE user_id = auth.uid()
      AND tenant_id = tenant_pricing.tenant_id
    )
  );

-- Create policies for tenant_users
CREATE POLICY "System admins can manage all users"
  ON tenant_users
  USING (
    EXISTS (
      SELECT 1 FROM tenant_users
      WHERE user_id = auth.uid()
      AND role = 'admin'
    )
  );

CREATE POLICY "Owners can manage their tenant users"
  ON tenant_users
  USING (
    EXISTS (
      SELECT 1 FROM tenant_users
      WHERE user_id = auth.uid()
      AND tenant_id = tenant_users.tenant_id
      AND role = 'owner'
    )
  );

-- Create updated_at triggers
CREATE TRIGGER update_tenants_updated_at
  BEFORE UPDATE ON tenants
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_tenant_sites_updated_at
  BEFORE UPDATE ON tenant_sites
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_tenant_pricing_updated_at
  BEFORE UPDATE ON tenant_pricing
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_tenant_users_updated_at
  BEFORE UPDATE ON tenant_users
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();